# Order Service - Production Configuration
spring:
  application:
    name: order-service

  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://order-db:5432/orderdb}
    username: ${DATABASE_USERNAME:orderuser}
    password: ${DATABASE_PASSWORD:orderpass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

server:
  port: 8085
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  http2:
    enabled: true

# API Key for authentication
api:
  key: ${API_KEY:order-service-production-api-key-must-be-changed}

# Payment configuration
payment:
  rejectionProbability: ${PAYMENT_REJECTION_PROBABILITY:0.1}
  retryCount: ${PAYMENT_RETRY_COUNT:5}

# Service URLs for inter-service communication
services:
  client:
    url: ${CLIENT_SERVICE_URL:http://client-service:8081}
    apiKey: ${CLIENT_SERVICE_API_KEY:production-client-service-api-key}
  token:
    url: ${TOKEN_SERVICE_URL:http://token-service:8082}
    apiKey: ${TOKEN_SERVICE_API_KEY:production-token-service-api-key}
  product:
    url: ${PRODUCT_SERVICE_URL:http://product-service:8083}
    apiKey: ${PRODUCT_SERVICE_API_KEY:production-product-service-api-key}
  cart-service:
    url: ${CART_SERVICE_URL:http://cart-service:8084}
    api-key: ${CART_SERVICE_API_KEY:production-cart-service-api-key}

# Email configuration
email:
  enabled: ${EMAIL_ENABLED:true}
  from: ${EMAIL_FROM:noreply@farmatodo.com}
  host: ${EMAIL_HOST:smtp.gmail.com}
  port: ${EMAIL_PORT:587}
  username: ${EMAIL_USERNAME:}
  password: ${EMAIL_PASSWORD:}

# Logging configuration
logging:
  level:
    com.farmatodo.order_service: INFO
    org.springframework.web: WARN
    org.hibernate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{transactionId}] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/order-service/application.log
    max-size: 10MB
    max-history: 30

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
